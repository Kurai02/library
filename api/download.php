<?php
require_once '../config.php';

if (!isLoggedIn()) {
    http_response_code(401);
    echo json_encode(['success' => false, 'message' => 'Unauthorized']);
    exit();
}

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['success' => false, 'message' => 'Method not allowed']);
    exit();
}

$input = json_decode(file_get_contents('php://input'), true);
$bookId = $input['book_id'] ?? null;
$userId = $_SESSION['user_id'];

if (!$bookId) {
    header('Content-Type: application/json');
    echo json_encode(['success' => false, 'message' => 'Book ID is required']);
    exit();
}

try {
    // Check if book exists and is digital
    $stmt = $pdo->prepare("SELECT id, title, author, book_type, file_path FROM books WHERE id = ? AND is_active = 1");
    $stmt->execute([$bookId]);
    $book = $stmt->fetch();
    
    if (!$book) {
        header('Content-Type: application/json');
        echo json_encode(['success' => false, 'message' => 'Book not found']);
        exit();
    }
    
    if ($book['book_type'] !== 'digital') {
        header('Content-Type: application/json');
        echo json_encode(['success' => false, 'message' => 'Only digital books can be downloaded']);
        exit();
    }
    
    // Log the download
    $stmt = $pdo->prepare("INSERT INTO digital_downloads (user_id, book_id, ip_address) VALUES (?, ?, ?)");
    $stmt->execute([$userId, $bookId, $_SERVER['REMOTE_ADDR']]);
    
    // Log activity
    logActivity($userId, 'Digital Book Downloaded', "Downloaded book: {$book['title']} (ID: $bookId)");
    
    // For demo purposes, we'll generate a sample PDF content
    // In a real application, you would serve the actual file
    $pdfContent = generateSamplePDF($book['title'], $book['author']);
    
    // Set headers for file download
    header('Content-Type: application/pdf');
    header('Content-Disposition: attachment; filename="' . sanitizeFilename($book['title']) . '.pdf"');
    header('Content-Length: ' . strlen($pdfContent));
    header('Cache-Control: must-revalidate');
    header('Pragma: public');
    
    echo $pdfContent;
    
} catch (PDOException $e) {
    error_log("Download error: " . $e->getMessage());
    header('Content-Type: application/json');
    echo json_encode(['success' => false, 'message' => 'System error occurred']);
}

function sanitizeFilename($filename) {
    return preg_replace('/[^a-zA-Z0-9\-_\.]/', '_', $filename);
}

function generateSamplePDF($title, $author) {
    // This is a simplified PDF content for demo purposes
    // In a real application, use a proper PDF library like FPDF or TCPDF

    $rawContent = "This is a SAMPLE DIGITAL BOOK generated by the Library Management System.
It is for DEMONSTRATION PURPOSES ONLY.

Chapter 1: The First Line of Code

The screen glowed softly in the dim light of the room. A blinking cursor waited patiently, ready for its next command. You, the reader, had taken the first step into a world built not of stone or wood, but of logic, structure, and creativity.

This is the beginning of your journey into the heart of web development. And like all great journeys, it starts with learning the language of the land. In this case, three languages: PHP, MySQL, and JavaScript.

PHP: The Server's Whisper

PHP is a language that speaks from the shadows. It works behind the scenes, quietly interpreting your logic and delivering the right content to the right person at the right time. It's the part of your website that users never see — but always feel.

You might write:
<?php
echo \"Hello, world!\";
?>

And the world responds. This simple phrase begins the conversation between you and the machine.

MySQL: The Memory Keeper

Every website has a memory — a place where data lives, waiting to be called upon. MySQL is that memory. It's a relational database, storing information in tables with rows and columns, like a well-organized spreadsheet.

JavaScript: The Spark of Life

While PHP and MySQL form the foundation and memory of your application, JavaScript is the spark that brings it all to life. It runs in the browser — the very interface your users touch and see.

document.getElementById(\"demo\").innerText = \"Hello, world!\";

Chapter 2: The Trio in Harmony

Learning these three languages together isn’t just about understanding syntax — it’s about how they interact. Together, they form the soul of dynamic web applications.

Chapter 3: Building Something Real

You’ll create logins, store user data, validate input, and build something that lives. Save your work. Make mistakes. Keep building.

--- END OF SAMPLE ---";

    $wrapped = wordwrap($rawContent, 90);
    $lines = explode("\n", $wrapped);

    // Split lines into pages (45 lines per page)
    $linesPerPage = 45;
    $pages = array_chunk($lines, $linesPerPage);

    $objects = [];
    $pageObjects = [];
    $contentObjects = [];
    $offsets = [];
    $pdf = "%PDF-1.4\n";

    $objectId = 1;

    // Root catalog
    $catalogId = $objectId++;
    $pdf .= "$catalogId 0 obj\n<< /Type /Catalog /Pages 2 0 R >>\nendobj\n";

    // Pages container
    $pagesId = $objectId++;
    $pagesKids = "";

    foreach ($pages as $i => $pageLines) {
        $contentStream = "BT\n/F1 12 Tf\n50 750 Td\n";
        if ($i == 0) {
            $contentStream .= "(" . addslashes($title) . ") Tj\n0 -20 Td\n";
            $contentStream .= "(by " . addslashes($author) . ") Tj\n0 -30 Td\n";
        }

        foreach ($pageLines as $line) {
            $safeLine = addslashes($line);
            $contentStream .= "($safeLine) Tj\n0 -15 Td\n";
        }
        $contentStream .= "ET";

        // Content object
        $contentId = $objectId++;
        $length = strlen($contentStream);
        $pdf .= "$contentId 0 obj\n<< /Length $length >>\nstream\n$contentStream\nendstream\nendobj\n";
        $contentObjects[] = $contentId;

        // Page object
        $pageId = $objectId++;
        $pagesKids .= "$pageId 0 R ";
        $pdf .= "$pageId 0 obj\n<< /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] /Contents $contentId 0 R /Resources << /Font << /F1 5 0 R >> >> >>\nendobj\n";
        $pageObjects[] = $pageId;
    }

    // Pages object with all children
    $pdf .= "$pagesId 0 obj\n<< /Type /Pages /Kids [ $pagesKids ] /Count " . count($pageObjects) . " >>\nendobj\n";

    // Font object
    $fontId = $objectId++;
    $pdf .= "$fontId 0 obj\n<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>\nendobj\n";

    // Record offsets
    $pdfLines = explode("\n", $pdf);
    $offset = 0;
    $xrefTable = "xref\n0 $objectId\n0000000000 65535 f \n";
    foreach ($pdfLines as $line) {
        if (preg_match('/^(\d+) 0 obj$/', $line, $match)) {
            $offsets[$match[1]] = sprintf('%010d', $offset);
        }
        $offset += strlen($line) + 1; // +1 for \n
    }

    for ($i = 1; $i < $objectId; $i++) {
        $xrefTable .= ($offsets[$i] ?? "0000000000") . " 00000 n \n";
    }

    $pdf .= "$xrefTable";
    $pdf .= "trailer\n<< /Size $objectId /Root $catalogId 0 R >>\n";
    $pdf .= "startxref\n$offset\n%%EOF";

    return $pdf;
}

?>